Inputs: in1[4], in2[4], opCode[4];
Outputs: out[4], negative, zero;

Parts: not1 NOT4B, not2 NOT4B, notout NOT4B,
       mux1 MUX4B, mux2 MUX4B, muxout MUX4B, muxop MUX4B,
       add ADDER4B, nand NAND4B, or OR4W, and AND, notzero NOT;

Wires:
  // wire opcodes to mux branches
  opCode[4] -> mux1.sel , opCode[3] -> mux2.sel,
  opCode[2] -> muxop.sel, opCode[1] -> muxout.sel,

  // negate in1?
  in1 -> not1.in, not1.out -> mux1.in2, in1 -> mux1.in1,
  // negate in2?
  in2 -> not2.in, not2.out -> mux2.in2, in2 -> mux2.in1,

  0 -> add.carryIn,
  // add or nand 1 & 2?
  // ------------------
  // sel=0  add 1 & 2
  mux1.out -> add.in1, mux2.out -> add.in2,
  // sel=1 nand 1 & 2
  mux1.out -> nand.in1, mux2.out -> nand.in2,
  add.out -> muxop.in1, nand.out -> muxop.in2,

  // bitwise negate out?
  muxop.out -> notout.in, notout.out -> muxout.in2,
  muxop.out -> muxout.in1,

  // output
  muxout.out -> out,

  // is output zero?
  muxout.out -> or.in, or.out -> notzero.in, notzero.out -> zero,

  // is output negative?
  muxout.out[4] -> and.in1, 1 -> and.in2, and.out -> negative
  ;
